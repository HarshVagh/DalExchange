stages:
  - build
  - test
  - publish
  - deploy

backend_build:
  stage: build
  image: maven:3.9.7-sapmachine-17
  before_script:
    - cd backend/
  script:
    - echo "------------------------------------------------------"
    - echo "Backend Build Started"
    - mvn clean install
    - echo "Backend Build Completed"
    - echo "------------------------------------------------------"
  artifacts:
    paths:
      - backend/target
  tags:
    - dalfcs_docker_kvm

frontend_build:
  stage: build
  image: node:alpine
  before_script:
    - cd frontend/
  script:
    - echo "------------------------------------------------------"
    - echo "Frontend Build Started"
    - npm install
    - echo "------------------------------------------------------"
    - npm run build
    - echo "Frontend Build Completed"
    - echo "------------------------------------------------------"
  artifacts:
    paths:
      - frontend/build
  tags:
    - dalfcs_docker_kvm

backend_test:
  stage: test
  image: maven:3.9.7-sapmachine-17
  before_script:
    - cd backend/
  script:
    - echo "------------------------------------------------------"
    - echo "Backend tests Started"
    - mvn test
    - echo "Backend Tests Completed"
    - echo "------------------------------------------------------"
  tags:
    - dalfcs_docker_kvm

publish_backend:
  stage: publish
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - cd backend/
  script:
    - echo "------------------------------------------------------"
    - echo $DOCKER_HOST
    - docker --version
    - echo "Docker Login started"
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
    - echo "Docker Login completed"
    - echo "------------------------------------------------------"
    - echo "Started building image for backend"
    - docker build -t docker.io/$DOCKER_USERNAME/backend .
    - echo "Image build completed for backend"
    - echo "------------------------------------------------------"
    - echo "Started pushing image to docker hub"
    - docker push docker.io/$DOCKER_USERNAME/backend
  after_script:
    - echo "Pushed image to docker hub @$DOCKER_USERNAME:frontend"
    - docker logout
  tags:
    - dalfcs_docker_kvm

publish_frontend:
  stage: publish
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - cd frontend/
  script:
    - echo "------------------------------------------------------"
    - echo $DOCKER_HOST
    - docker --version
    - echo "Docker Login started"
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
    - echo "Docker Login completed"
    - echo "------------------------------------------------------"
    - echo "Started building image for backend"
    - docker build -t docker.io/$DOCKER_USERNAME/frontend .
    - echo "Image build completed for frontend"
    - echo "------------------------------------------------------"
    - echo "Started pushing image to docker hub"
    - docker push docker.io/$DOCKER_USERNAME/frontend
  after_script:
    - echo "Pushed Image to docker hub @$DOCKER_USERNAME:frontend"
    - docker logout
  tags:
    - dalfcs_docker_kvm

deploy_backend:
  image: alpine:latest
  stage: deploy
  tags:
    - dalfcs_docker_kvm
  script:
    - echo "------------------------------------------------------"
    - echo "Deploying Backend..."
    - apk update && apk add openssh-client sshpass
    - sudo apt-get install sshpass || true
    - which ssh || true
    - which sshpass || true
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker pull docker.io/$DOCKER_USERNAME/backend"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker pull docker.io/$DOCKER_USERNAME/frontend"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker container rm -f backend || true"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker run -d -p 8080:8080 --name backend docker.io/$DOCKER_USERNAME/backend"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker run -d -p 80:80 --name frontend docker.io/$DOCKER_USERNAME/frontend"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker images -a"
    - sshpass -p $VM_PWD ssh -o StrictHostKeyChecking=no student@$SERVER_NAME "docker container ls -a"
    - echo "------------------------------------------------------"
  only:
    - main
